
coherent uniform layout(r32ui)  uimage2D ABufferIndex;
coherent uniform layout(r32ui)  uimage2D ABufferCounts;
coherent uniform layout(r32ui)  uimage2D ABufferSemaphore;

coherent uniform layout(r32ui) uimageBuffer PageLinks;
coherent uniform layout(rgba8) imageBuffer ColorPages;
coherent uniform layout(r32f)  imageBuffer DepthPages;

#define PageSize 8
layout(binding = 0) uniform atomic_uint PageCounter;

uniform uint MaxPageCount;

bool AttemptAcquireSemaphore(ivec2 coords)
{
	return (imageAtomicExchange(ABufferSemaphore, coords, 1U)==0U);
}

void ReleaseSemaphore(ivec2 coords)
{
	imageAtomicExchange(ABufferSemaphore, coords, 0U);
}

uint GetCurrentPage(ivec2 coords)
{
	return imageLoad(ABufferIndex, coords).x;
}

void SetCurrentPage(ivec2 coords, uint newpageidx)
{
	imageStore(ABufferIndex, coords, uvec4(newpageidx, 0U, 0U, 0U));
}

uint GetFragCounter(ivec2 coords)
{
	return imageLoad(ABufferCounts, coords).x;
}
void SetFragCounter(ivec2 coords, uint val)
{
	imageStore(ABufferCounts, coords, uvec4(val, 0U, 0U, 0U));
}

void IncrementFragCounter (ivec2 coords, uint value)
{
	imageAtomicAdd(ABufferCounts, coords, value);
}

uint IncrementPageCounter ()
{
	return atomicCounterIncrement(PageCounter);
}

uint GetPageLink (uint page)
{
	return imageLoad(PageLinks, int(page)).x;
}

void SetPageLink (uint page, uint pointer)
{
	imageStore(PageLinks, int(page), uvec4(pointer, 0U, 0U, 0U));
}

vec4 GetColor(uint index)
{
	return imageLoad(ColorPages, int(index));
}
void SetColor(uint index, vec4 val)
{
	imageStore(ColorPages, int(index), val);
}

vec4 GetDepth(uint index)
{
	return imageLoad(DepthPages, int(index));
}
void SetDepth(uint index, float val)
{
	imageStore(DepthPages, int(index), vec4(val,0.0,0.0,0.0));
}