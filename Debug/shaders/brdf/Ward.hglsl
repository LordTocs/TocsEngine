vec4 Ward (vec3 LightDir, vec3 ViewDir, vec3 LightColor, float Attenuation, vec3 Normal, vec3 Tangent, vec4 Diffuse, vec4 Specular, vec2 Roughness)
{
	vec3 BiTangent = normalize(cross(Normal,Tangent));
	vec3 h = normalize (LightDir + ViewDir);
	
	Roughness += vec2(0.00001f,0.00001f); //bias
	
	float VdotN = dot(ViewDir, Normal);
	float LdotN = dot(LightDir, Normal);
	float HdotN = dot(h, Normal);
	float HdotT = dot(h, Tangent );
	float HdotB = dot(h, BiTangent );
	
	// Evaluate the specular exponent
    float beta_a  = HdotT / Roughness.x;
    beta_a       *= beta_a;
 
    float beta_b  = HdotB / Roughness.y;
    beta_b       *= beta_b;
 
    float beta = -2.0f * ( ( beta_a + beta_b ) / ( 1.0f + HdotN ) );
 
    // Evaluate the specular denominator
    float s_den  = 4.0f * 3.14159f; 
    s_den       *= Roughness.x;
    s_den       *= Roughness.y;
    s_den       *= sqrt( LdotN * VdotN );
 
    // Compute the final specular term
    Specular = Attenuation * Specular 
	* sqrt(max(0.0, LdotN / VdotN)) 
	* exp (beta / (1.0 + HdotN));
	
	Diffuse = Attenuation * Diffuse * clamp(LdotN,0.0,1.0);
    // Composite the final value
    return vec4(LightColor * (Diffuse.rgb + Specular.rgb), Diffuse.a);
}