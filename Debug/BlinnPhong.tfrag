#version 140

<%input vec4 DiffuseColor%>
<%input vec4 SpecularColor%>
<%input float SpecularPower%>
<%input float SpecularIntensity%>

in vec2 TextureCoordinate;
in vec3 GeometryNormal;



vec4 BlinnPhong (vec3 LightDir, vec3 ViewDir, vec3 LightColor, float Attenuation, vec3 Normal, vec4 Diffuse, vec4 Specular, float SpecularPower, float SpecularIntensity)
{
	float NdotL = dot(LightDir,Normal);
	float lambert = clamp(NdotL,0,1);
	
	vec4 result = vec4 (Attenuation * lambert * Diffuse.rgb * LightColor, Diffuse.a);
	
	vec3 Half = normalize(LightDir + ViewDir);
	float NdotH = max (0,dot (Normal,Half));
	float spec  = pow(NdotH, SpecularPower);
	
	result += Attenuation * spec * SpecularIntensity * Specular * vec4 (LightColor,1);

	return result;
}

<%definitions%>

void ShadePrep ()
{
	<%init%>
}

vec4 Shade (vec3 LightDir, vec3 ViewDir, vec3 LightColor, float Attenuation)
{
	return BlinnPhong (LightDir, ViewDir, LightColor, Attenuation, normalize(GeometryNormal), DiffuseColor, SpecularColor, SpecularPower, SpecularIntensity);
}
