#version 130
precision highp float;

uniform mat4 World;
uniform mat4 View;
uniform mat4 Projection;

in vec4 ViewPos;
in vec2 ZoW;
in vec2 TextureCoordinate;
in vec3 GeometryNormal;

<%vec3 NormalMap%>
<%vec3 Albedo%>
<%vec3 Specular%>
<%float Roughness%>
<%float SpecularPower%>
<%float SpecularIntensity%>


out vec4 ColorOut;
out vec4 NormalOut;
out vec4 MaterialOut;
out vec4 DepthOut;

<%definitions%>

mat3 ComputeTangentFrame (vec3 normal, vec3 viewpos, vec2 texcoord)
{
	vec3 dp1 = dFdx(viewpos);
	vec3 dp2 = dFdy(viewpos);
	vec2 duv1 = dFdy(texcoord);
	vec2 duv2 = dFdy(texcoord);
	
	mat3 M = mat3 (dp1, dp2, cross(dp1,dp2));
	mat2x3 invM = mat2x3 (cross(M[1],M[2]), cross(M[2],M[0]));
	vec3 t = invM * vec2(duv1.x, duv2.x);
	vec3 b = invM * vec2(duv1.y, duv2.y);
	
	return mat3(normalize(t),normalize(b),normal);
}

void main ()
{
	<%initialization%>
	
	<%ifis NormalMap : Map%>
		mat3 tbn = ComputeTangentFrame (GeometryNormal, ViewPosition, TextureCoordinate);
		vec3 FinalNormal = tbn * (NormalMap * 2 - 1);
	<%endif%>
	<%ifis NormalMap : None%>
		vec3 FinalNormal = GeometryNormal;
	<%endif%>
	ColorOut =    vec4 (Albedo, Roughness);
	NormalOut =   vec4 ((FinalNormal + 1.0)/2.0, SpecularPower);
	MaterialOut = vec4 (Specular, SpecularIntensity);
	DepthOut =    vec4 (ZoW.x/ZoW.y,1.0,1.0,1.0);
}