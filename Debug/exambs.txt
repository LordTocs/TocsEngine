
b)
	cam:
	[1 0 0 1.5]   [cos (r) 0 sin(r) 0]
	[0 1 0 2  ]   [0       1 0      0]
	[0 0 1 17 ] * [-sin(r) 0 cos(r) 0]
	[0 0 0 1  ]   [0       0 0      1]
	shaft:
	[1 0 0  0]   [cos (r) 0 sin(r) 0]
	[0 1 0 -9]   [0       1 0      0]
	[0 0 1  1] * [-sin(r) 0 cos(r) 0]
	[0 0 0  1]   [0       0 0      1]
	baseboard:
	[1 0 0 0]
	[0 1 0 0]
	[0 0 1 0]
	[0 0 0 1]
	
c)
	desk:
	[1 0 0 0 ]
	[0 1 0 0 ]
	[0 0 1 28]
	[0 0 0 1 ]
	
	0.999624, 0, 0.0274121, 1.73288
	0, 1, 0, -7
	-0.0274121, 0, 0.999624, 47.9778
	0, 0, 0, 1
	
d)  

#include <glm/glm.h> // give me the maths.

//Make your buffers
//cam


glm::vec3 camverts [] =
{ glm::vec3 (x,y,z) ... };

GLuint camindices [] =
{ 0, 1,2, 1,2,3 };

//vertex buffer
GLuint camvbo;
glGenBuffers (1, &camvbo);

glBindBuffer (GL_ARRAY_BUFFER,camvbo);

glBufferData (GL_ARRAY_BUFFER,sizeof(camverts)/sizeof(glm::vec3),&camverts,GL_DYNAMIC_DRAW);

//index buffer
GLuint camibo;
glGenBuffers(GL_ELEMENT_ARRAY_BUFFER,&camibo);

glBindBuffer (GL_ELEMENT_ARRAY_BUFFER,camibo);

glBufferData (GL_ELEMENT_ARRAY_BUFFER,sizeof(camindices)/sizeof(GLuint),&camindices,GL_DYNAMIC_DRAW);

//vertex attributes in vertex array
GLuint camvao;
glGenVertexArrays (1, &camvao);

glBindVertexArray (camvao);

glBindBuffer (GL_ARRAY_BUFFER,camvbo);

glEnableVertexAttribArray (0);
glVertexAttribPointer (0,3,GL_FLOAT,false,sizeof(GLfloat)*3,0);

glBindVertexArray (0);

glm::mat4 camocs = glm::translate (glm::mat4(1.0f), glm::vec3(1.5f,2.0f,17.0f));

//shaft
//baseboard
//table

							  //pos,              look,            up
glm::mat4 View = glm::lookAt (glm::vec3(50,50,50),glm::vec3(0,0,0),glm::vec3(0,0,1));


glm::mat4 cammodelview = View * baseboardocs * shaftocs * camocs;

glUseProgram (shader);

glUniformMatrix4f (1,1,false,&camprojection);

glBindArrayBuffer (camvao);
glUniformMatrix4f (0,1,false,&cammodelview);
glBindBuffer (GL_ELEMENT_ARRAY_BUFFER,camibo);
glDrawElements (GL_TRIANGLES, sizeof(camindices)/sizeof(GLuint), GL_UNSIGNED_INT, 0);



