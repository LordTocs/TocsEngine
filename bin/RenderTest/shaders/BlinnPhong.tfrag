#version 140
#include "shaders/brdf/blinnphong.hglsl"
#include "shaders/brdf/NormalMapping.hglsl"

<%input vec4 DiffuseColor%>
<%input vec4 SpecularColor%>
<%input float SpecularPower%>
<%input float SpecularIntensity%>
<%input vec3 NormalMap optional%>
<%input vec4 Emissive optional%>

in vec2 TextureCoordinate;
in vec3 GeometryNormal;
in vec3 GeometryTangent;

<%definitions%>

void ShadePrep ()
{
	<%init%>
}

vec4 ConstantShading(vec4 AmbientLight)
{
	vec4 result = AmbientLight * DiffuseColor;
	<%ifis not Emissive: None%>
		result += Emissive;
	<%endif%>
	return result;
}

vec4 Shade (vec3 LightDir, vec3 ViewDir, vec3 LightColor, float Attenuation)
{
	vec3 normal = normalize(GeometryNormal);
	<%ifis NormalMap: Texture %>
		normal = NormalMapping(normal,normalize(GeometryTangent),NormalMap);
	<%endif%>
	return BlinnPhong (LightDir, ViewDir, LightColor, Attenuation, normal, DiffuseColor, SpecularColor, SpecularPower, SpecularIntensity);
}
